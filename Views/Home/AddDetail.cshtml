@model OnlineShopping.Models.Signup

@{
    ViewBag.Title = "AddDetail";
    Layout = "~/Views/Home/MainHomePageLayout.cshtml";
}
<link href="~/Content/CSS/createForm.css" rel="stylesheet" />



<div class="secondnav">
    @Html.ActionLink("sell on snapdeal", "AddSellerDetails")
</div>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="container">
        
        <div style="font-size:25px ;">
            <h3>Sign Up</h3>
        </div>

        <div class="form">

            <hr />

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="input-box">

                @Html.LabelFor(model => model.firstName, htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.EditorFor(model => model.firstName, new { htmlAttributes = new { @class = "form-control", id = "firstName", onfocusout = "validateFirstName()" } })
                @Html.ValidationMessageFor(model => model.firstName, "", new { @class = "text-danger" })
                <span id="firstNameError" class="text-danger"></span>

            </div>

            <div class="input-box">
                @Html.LabelFor(model => model.lastName, htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.EditorFor(model => model.lastName, new { htmlAttributes = new { @class = "form-control", id = "lastName", onfocusout = "validateLastName()" } })
                @Html.ValidationMessageFor(model => model.lastName, "", new { @class = "text-danger" })
                <span id="lastNameError" class="text-danger"></span>

            </div>

            <div class="input-box">

                @Html.LabelFor(model => model.dateOfBirth, htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.EditorFor(model => model.dateOfBirth, new { htmlAttributes = new { @class = "form-control", id = "dateOfBirth", onfocusout = "validateDateOfBirth()" } })
                @Html.ValidationMessageFor(model => model.dateOfBirth, "", new { @class = "text-danger" })
                <span id="dateOfBirthError" class="text-danger"></span>

            </div>
            <div class="">
                @Html.LabelFor(model => model.gender, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="form-gender">
                    @Html.Label("Male")
                    @Html.RadioButtonFor(model => model.gender, "M", new { @class = "form-check-input", id = "gender-male" })

                    @Html.Label("Female")
                    @Html.RadioButtonFor(model => model.gender, "F", new { @class = "form-check-input", id = "gender-female" })
                </div>
            </div>

            <div class="input-box">
                @Html.LabelFor(model => model.email, htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "form-control", id = "email", onfocusout = "validateEmail()" } })
                @Html.ValidationMessageFor(model => model.email, "", new { @class = "text-danger" })
                <span id="emailError" class="text-danger"></span>

            </div>

            <div class="input-box">

                @Html.LabelFor(model => model.phoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.EditorFor(model => model.phoneNumber, new { htmlAttributes = new { @class = "form-control", id = "phoneNumber", onfocusout = "validatePhoneNumber()" } })
                @Html.ValidationMessageFor(model => model.phoneNumber, "", new { @class = "text-danger" })
                <span id="phoneNumberError" class="text-danger"></span>
            </div>

            <div class="input-box">
                @Html.LabelFor(model => model.address, htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.EditorFor(model => model.address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.address, "", new { @class = "text-danger" })
            </div>
            <div class="input-box">
                @Html.LabelFor(model => model.country, htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.EditorFor(model => model.country, new { htmlAttributes = new { @class = "form-control" } })

                @Html.ValidationMessageFor(model => model.country, "", new { @class = "text-danger" })
            </div>

            <div class="inpt-box">
                @Html.LabelFor(model => model.state, htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.EditorFor(model => model.state, new { htmlAttributes = new { @class = "form-control" } })

                @Html.ValidationMessageFor(model => model.state, "", new { @class = "text-danger" })
            </div>
            <div class="input-box">
                @Html.LabelFor(model => model.city, htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.EditorFor(model => model.city, new { htmlAttributes = new { @class = "form-control" } })

                @Html.ValidationMessageFor(model => model.city, "", new { @class = "text-danger" })
            </div>



            <div class="input-box">
                @Html.LabelFor(model => model.pincode, htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.EditorFor(model => model.pincode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.pincode, "", new { @class = "text-danger" })
            </div>



            <div class="input-box">
                @Html.LabelFor(model => model.username, htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.EditorFor(model => model.username, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.username, "", new { @class = "text-danger" })
            </div>

            <div class="input-box">
                @Html.LabelFor(model => model.password, htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.EditorFor(model => model.password, new { htmlAttributes = new { @class = "form-control", id = "password", onkeyup = "validatePassword()" } })
                @Html.ValidationMessageFor(model => model.password, "", new { @class = "text-danger" })
                <span id="passwordError" class="text-danger"></span>
            </div>

            <div class="input-box">
                @Html.LabelFor(model => model.confirmPassword, htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.EditorFor(model => model.confirmPassword, new { htmlAttributes = new { @class = "form-control", id = "confirmPassword", onkeyup = "validatePassword()" } })
                @Html.ValidationMessageFor(model => model.confirmPassword, "", new { @class = "text-danger" })
                <span id="confirmPasswordError" class="text-danger"></span>
            </div>

            <div>
                <div>
                    <input type="submit" value="Signup" class="button" />
                </div>
            </div>
        </div>
    </div>
}

@Html.ActionLink("Back to List", "Index")


<script>

    function validateFirstName() {
    var firstNameInput = document.getElementById("firstName");
    var firstNameValue = firstNameInput.value.trim();
    var firstNameError = document.getElementById("firstNameError");

    // Clear previous error message
    firstNameError.textContent = "";

    // Check if the field is empty
    if (firstNameValue === "") {
        firstNameError.textContent = "First name cannot be empty.";
        return;
    }

    // Check if the input contains only alphabetic characters
    if (!/^[A-Za-z]+$/.test(firstNameValue)) {
        firstNameError.textContent = "First name should contain alphabetic characters only.";
        return;
    }


    // Attach validateFirstName to the onfocusout event
    var firstNameInput = document.getElementById("firstName");
    firstNameInput.addEventListener("focusout", validateFirstName);
}


function validateLastName() {
    var lastNameInput = document.getElementById("lastName");
    var lastNameValue = lastNameInput.value.trim();
    var lastNameError = document.getElementById("lastNameError");

    // Clear previous error message
    lastNameError.textContent = "";

    // Check if the field is empty
    if (lastNameValue === "") {
        lastNameError.textContent = "Last name cannot be empty.";
        return;
    }

    // Check if the input contains only alphabetic characters
    if (!/^[A-Za-z]+$/.test(lastNameValue)) {
        lastNameError.textContent = "Last name should contain alphabetic characters only.";
        return;
    }


    // Attach validateFirstName to the onfocusout event
    var lastNameInput = document.getElementById("lastName");
    lastNameInput.addEventListener("focusout", validateLastName);
}


    function validateDateOfBirth() {
        var dateOfBirthInput = document.getElementById("dateOfBirth");
        var dateOfBirthError = document.getElementById("dateOfBirthError");

        var enteredDate = new Date(dateOfBirthInput.value);
        var currentDate = new Date();
        var minDate = new Date();
        minDate.setFullYear(currentDate.getFullYear() - 18); // Set minimum age to 18 years

        if (enteredDate > currentDate) {
            dateOfBirthError.innerHTML = "Date of birth cannot be a future date.";
        } else if (enteredDate > minDate) {
            dateOfBirthError.innerHTML = "Minimum age requirement is 18 years.";
        } else {
            dateOfBirthError.innerHTML = "";
        }
    }
var emailPattern = @Html.Raw("new RegExp(\"^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$\")");

function validateEmail() {
    var emailInput = document.getElementById("email");
    var emailError = document.getElementById("emailError");

    if (!emailPattern.test(emailInput.value)) {
        emailError.innerHTML = "Invalid email address.";
    } else {
        emailError.innerHTML = "";
    }
}
function validatePhoneNumber() {
    var phoneNumberInput = document.getElementById("phoneNumber");
    var phoneNumberError = document.getElementById("phoneNumberError");

    var phoneNumberPattern = /^\d{10}$/;

    if (!phoneNumberPattern.test(phoneNumberInput.value)) {
        phoneNumberError.innerHTML = "Phone number must be exactly 10 digits.";
    } else {
        phoneNumberError.innerHTML = "";
    }
}
var passwordPattern = @Html.Raw(@"/^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/");

function validatePassword() {
    var passwordInput = document.getElementById("password");
    var confirmPasswordInput = document.getElementById("confirmPassword");
    var passwordError = document.getElementById("passwordError");
    var confirmPasswordError = document.getElementById("confirmPasswordError");
    if (!passwordPattern.test(passwordInput.value)) {
        passwordError.innerHTML = "Password must contain at least 1 uppercase letter, 1 lowercase letter, 1 digit, 1 special symbol, and be at least 8 characters long.";
    } else {
        passwordError.innerHTML = "";
    }
    if (passwordInput.value !== confirmPasswordInput.value) {
        confirmPasswordError.innerHTML = "Passwords do not match.";
    } else {
        confirmPasswordError.innerHTML = "";
    }
}


</script>